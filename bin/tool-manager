#!/usr/bin/env bash
set -euo pipefail

# DEPRECATED: This script is a compatibility wrapper for the old tool-manager interface
# New usage:
#   bootstrap       - Fresh system setup
#   tool-update     - Daily/weekly updates
#
# This wrapper maps old flags to the new Ansible-based approach

# Determine script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Show deprecation notice
show_deprecation_notice() {
    echo "========================================"
    echo "⚠️  DEPRECATION NOTICE"
    echo "========================================"
    echo "tool-manager is deprecated. Please use:"
    echo "  - bootstrap: Fresh system setup"
    echo "  - tool-update: Update existing tools"
    echo ""
    echo "Mapping your command to the new interface..."
    echo "========================================"
    echo ""
}

# Process command line arguments
SETUP_MODE=0
DEV_MODE=0
FORCE_INSTALL=0
HELP=0

while [[ $# -gt 0 ]]; do
    case $1 in
        --setup)
            SETUP_MODE=1
            shift
            ;;
        --dev)
            DEV_MODE=1
            shift
            ;;
        --force-install)
            FORCE_INSTALL=1
            SETUP_MODE=1
            shift
            ;;
        --help|-h)
            HELP=1
            shift
            ;;
        *)
            echo "Unknown option: $1"
            HELP=1
            shift
            ;;
    esac
done

# Show help if requested
if [[ $HELP -eq 1 ]]; then
    echo "tool-manager (DEPRECATED - use 'bootstrap' or 'tool-update' instead)"
    echo ""
    echo "Legacy usage:"
    echo "  tool-manager [options]"
    echo ""
    echo "Options:"
    echo "  --setup          Install missing tools and update existing ones"
    echo "  --dev            Include development tools (Python, Jupyter, etc.)"
    echo "  --force-install  Force reinstall all tools"
    echo "  --help           Show this help message"
    echo ""
    echo "New recommended usage:"
    echo "  bootstrap              Fresh system setup"
    echo "  bootstrap --dev        Fresh setup with dev tools"
    echo "  tool-update            Update all tools"
    echo "  tool-update --dev      Update with dev tools"
    echo "  tool-update --check    See what would be updated"
    echo "  tool-update --tags X   Update specific category"
    exit 0
fi

show_deprecation_notice

# Map old behavior to new commands
if [[ $SETUP_MODE -eq 1 ]]; then
    # Setup mode maps to bootstrap or tool-update with setup tags
    ARGS=("--tags" "setup")

    if [[ $DEV_MODE -eq 1 ]]; then
        ARGS+=("--dev")
    fi

    if [[ $FORCE_INSTALL -eq 1 ]]; then
        ARGS+=("--extra-vars" "force=true")
    fi

    echo "Running: tool-update ${ARGS[*]}"
    echo ""
    exec "$SCRIPT_DIR/tool-update" "${ARGS[@]}"
else
    # Default mode (update) maps to tool-update
    ARGS=()

    if [[ $DEV_MODE -eq 1 ]]; then
        ARGS+=("--dev")
    fi

    echo "Running: tool-update ${ARGS[*]}"
    echo ""
    exec "$SCRIPT_DIR/tool-update" "${ARGS[@]}"
fi
