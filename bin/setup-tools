#!/usr/bin/env zsh

source ~/.zshrc

set -euC -o pipefail

# arch=$(uname -m)
os=$(uname -s)

DEV=0
while [[ $# -gt 0 ]]; do
	case $1 in
		--dev)
			DEV=1
			shift
			;;
		*)
			shift
			;;
	esac
done

DENO_VERSION="latest"
PYTHON_VERSION="latest"
NODE_VERSION="latest"

# Update homebrew if it's installed
if type brew &>/dev/null; then
	echo Updating Homebrew
	brew update
fi

# Install Rustup to bootstrap Rust
if ! type rustup &>/dev/null; then
	echo Installing Rust
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile minimal -y -q
	source $HOME/.cargo/env
fi

echo Updating Rust to latest stable toolchain
rustup toolchain install stable

# Install mise (formerly rtx)
if ! type mise &>/dev/null; then
	echo Installing mise
	curl https://mise.run | sh
	eval "$(mise activate zsh)"
fi

# add mise path just to be safe
path=(~/.local/share/mise/bin $PATH)

# This is just to deal with any existing pipx installations that may need to be reset
#pipx reinstall-all

if !type deno &>/dev/null; then
	echo Installing Deno version $DENO_VERSION

	# Install Deno
	mise use -g deno@$DENO_VERSION

fi

if !type node &>/dev/null; then
	echo Installing Node version $NODE_VERSION
	mise use -g node@$NODE_VERSION
fi

echo Install Rust tools
#rustup component add rust-src

cargo install cargo-update
cargo install-update cargo-outdated

# Better ls via eza
cargo install eza

# Better cat via bat
cargo install bat
bat cache --build

# cargo install mdbook
# cargo install mdbook-epub

if [[ $os = "Darwin" ]]; then
	brew install fzf fd
elif [[ $os = "Linux" ]]; then
	sudo apt install fzf fd-find
fi

# Install Atuin
curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

# install tpm for tmux plugins
if [[ ! -d ~/.tmux/plugins/tpm ]]; then
	echo Setup tmux plugin manager
	mkdir -p ~/.tmux/plugins
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi


if [[ $DEV -eq 1 ]]; then
	echo "Installing dev tools"

	echo Installing Python version $PYTHON_VERSION
	mise use -g python@$PYTHON_VERSION

	if ! type uv &>/dev/null; then
	    echo Installing uv
	    curl -LsSf https://astral.sh/uv/install.sh | sh
	fi

	echo Installing uv packages
	uv tool install yt-dlp
	uv tool install pygments
	uv tool install httpie
	uv tool install poetry
	uv tool install pipenv
	uv tool install jupyter-core \
	   --with jupyterlab \
	   --with requests \
	   --with pandas \
	   --with numpy \
	   --with matplotlib \
	   --with nbconvert \
	   --with nbclassic

	if type deno >&/dev/null; then
		deno jupyter --unstable --install
	fi

	echo Install Rust tools
	#rustup component add rust-src
	cargo install evcxr_repl
	cargo install --locked evcxr_jupyter
	evcxr_jupyter --install

	cargo install onefetch
else
	echo "Skipping dev tools"
fi
